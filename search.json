[{"path":"https://tiffanymtang.github.io/nerfplus/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 nerfplus authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"First Last. Author, maintainer.","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Last F (2025). nerfplus: Package (One Line, Title Case). R package version 0.0.0.9000.","code":"@Manual{,   title = {nerfplus: What the Package Does (One Line, Title Case)},   author = {First Last},   year = {2025},   note = {R package version 0.0.0.9000}, }"},{"path":"https://tiffanymtang.github.io/nerfplus/index.html","id":"nerfplus","dir":"","previous_headings":"","what":"What the Package Does (One Line, Title Case)","title":"What the Package Does (One Line, Title Case)","text":"nerfplus R package fitting interpreting Network-assisted Random Forest+ (NeRF+) models, introduced Tang, Levina, Zhu (2025+). high-level, NeRF+ provides flexible interpretable framework incorporate network information alongside node-level covariate information generalized random forest framework. practice, NeRF+ often exhibits highly-competitive predictive performance importantly, can also easily interpreted using feature importance sample influence measures implemented package’s interpretability toolkit.","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"What the Package Does (One Line, Title Case)","text":"can install development version nerfplus GitHub :","code":"# install.packages(\"remotes\") remotes::install_github(\"tiffanymtang/nerfplus\", subdir = \"nerfplus\") # or uncomment below to install with suggested dependencies; necessary to launch Shiny App # remotes::install_github(\"tiffanymtang/nerfplus\", subdir = \"nerfplus\", dependencies = \"Suggests\")"},{"path":"https://tiffanymtang.github.io/nerfplus/index.html","id":"example-usage","dir":"","previous_headings":"","what":"Example Usage","title":"What the Package Does (One Line, Title Case)","text":"demonstrate use nerfplus, make use example dataset provided package: example data contains: x: training covariate data xtest: test covariate data y: training response data ytest: test response data : training adjacency matrix A_full: full adjacency matrix (training test samples combined) Note samples A_full must aligned rows x xtest, order. , can provide vector node IDs indicate alignment (nodeids training samples nodeids_test test samples’ see ? nerfplus::interpret_nerfplus details). Using example dataset, can first fit NeRF+ pre-specified hyperparameters via: want tune hyperparameters, can instead use nerfplus_cv(). Let’s quickly make predictions test set using fitted (tuned) model check test prediction performance.  next interpret fitted NeRF+ model, can report: permutation MDI+ global feature importances local feature importances leave-one-(LOO) sample influence measures want compute interpretability measures separately, can via:","code":"library(nerfplus) set.seed(331)  # load example data data(example_data) str(example_data) #> List of 6 #>  $ x     : num [1:80, 1:10] -0.0676 -1.0671 0.4536 1.479 0.0363 ... #>  $ xtest : num [1:40, 1:10] -1.4549 -0.1724 -0.6287 0.0805 -0.3741 ... #>  $ y     : num [1:80] -0.842 -2.413 -0.131 0.313 -0.714 ... #>  $ ytest : num [1:40] -2.24 -1.36 -1.55 -1.21 -1.41 ... #>  $ A     : num [1:80, 1:80] 0 1 1 1 0 1 0 1 1 1 ... #>  $ A_full: num [1:120, 1:120] 0 1 1 1 0 1 0 1 1 1 ... lambda_netcoh <- 1 lambda_embed <- 0.1 lambda_raw <- 2 lambda_stump <- 3 fit <- nerfplus(   x = example_data$x, y = example_data$y, A = example_data$A,   lambda_netcoh = lambda_netcoh,   lambda_embed = lambda_embed,   lambda_raw = lambda_raw,   lambda_stump = lambda_stump,   family = \"linear\", embedding = \"laplacian\" ) lambdas_netcoh <- exp(seq(log(100), log(0.01), length.out = 5)) lambdas_embed <- exp(seq(log(100), log(0.01), length.out = 5)) lambdas_raw <- exp(seq(log(100), log(0.01), length.out = 5)) lambdas_stump <- exp(seq(log(100), log(0.01), length.out = 5)) cv_fit <- nerfplus_cv(   x = example_data$x, y = example_data$y, A = example_data$A,   lambdas_netcoh = lambdas_netcoh,   lambdas_embed = lambdas_embed,   lambdas_raw = lambdas_raw,   lambdas_stump = lambdas_stump,   family = \"linear\", embedding = \"laplacian\" ) yhat <- predict(   cv_fit, x = example_data$xtest, A_full = example_data$A_full ) cat(sprintf(\"Test MSE: %.3f\", mean((yhat - example_data$ytest)^2))) #> Test MSE: 0.482 data.frame(ytest = example_data$ytest, yhat = yhat) |>   ggplot2::ggplot(ggplot2::aes(x = ytest, y = yhat)) +   ggplot2::geom_point() +   ggplot2::geom_abline(     slope = 1, intercept = 0, color = \"black\", linetype = \"dashed\"   ) +   ggplot2::labs(     title = \"Test Set Predictions\",     x = \"True y\",     y = \"Predicted y\"   ) +   ggplot2::theme_minimal() interpret_results <- interpret_nerfplus(   cv_fit,   x = example_data$x, y = example_data$y, A = example_data$A,   xtest = example_data$xtest, ytest = example_data$ytest,    A_full = example_data$A_full,   methods = c(\"permute\", \"mdi+\", \"local\", \"loo\"),    # save = TRUE,   B = 25  # B = number of permutations ) # permutation global feature importance perm_globalfi <- get_feature_importances(   cv_fit,    x = example_data$xtest, y = example_data$ytest, A_full = example_data$A_full,   method = \"permute\", B = 25  # B = number of permutations )  # MDI+ global feature importance mdiplus_globalfi <- get_feature_importances(   cv_fit,    x = example_data$xtest, y = example_data$ytest, A_full = example_data$A_full,   method = \"mdi+\" )  # local feature importance localfi <- get_feature_importances(   cv_fit,    x = example_data$xtest, y = example_data$ytest, A_full = example_data$A_full,   method = \"local\" )  # leave-one-out sample influence loo_out <- get_loo(   cv_fit,    x = example_data$x, y = example_data$y, A = example_data$A,   xtest = example_data$xtest, ytest = example_data$ytest,    A_full = example_data$A_full )"},{"path":"https://tiffanymtang.github.io/nerfplus/index.html","id":"nerf-interpreter-shiny-app","dir":"","previous_headings":"","what":"NeRF+ Interpreter Shiny App","title":"What the Package Does (One Line, Title Case)","text":"ease interpretation NeRF+ models, also created Shiny App allows users visualize explore feature importance sample influence results interactively.  two main ways launch app. Note options rely suggested dependencies installed. install package suggested dependencies, can running remotes::install_github(\"tiffanymtang/nerfplus\", subdir = \"nerfplus\", dependencies = \"Suggests\"). Option 1: Launch app directly R without arguments. Shiny App can launched directly R via run_app() function: launching app, users can upload data fitted NeRF+ model (pre-computed interpretability results) app explore results. Note: users want upload pre-computed interpretability results (opposed Shiny App compute ), can uploading .rds files created interpret_nerfplus(save = TRUE) function. Option 2: Launch app directly R pre-computed interpretability results. Alternatively, users can use interpret_nerfplus() function compute interpretability results first, launch Shiny App results arguments run_app(). example:","code":"run_app() interpret_results <- interpret_nerfplus(   cv_fit,   x = example_data$x, y = example_data$y, A = example_data$A,   xtest = example_data$xtest, ytest = example_data$ytest,    A_full = example_data$A_full,   methods = c(\"permute\", \"mdi+\", \"local\", \"loo\"), B = 25 ) run_app(   data_list = interpret_results$data_list,   object = interpret_results$object,   fi_results = interpret_results$fi_results,   loo_results = interpret_results$loo_results )"},{"path":"https://tiffanymtang.github.io/nerfplus/reference/add_border.html","id":null,"dir":"Reference","previous_headings":"","what":"Add border class — add_border","title":"Add border class — add_border","text":"Add border class","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/add_border.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add border class — add_border","text":"","code":"add_border(obj, border = TRUE)"},{"path":"https://tiffanymtang.github.io/nerfplus/reference/add_border.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add border class — add_border","text":"obj Object add border . border Logical. Whether add border.","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/add_spinner.html","id":null,"dir":"Reference","previous_headings":"","what":"Add spinner when loading — add_spinner","title":"Add spinner when loading — add_spinner","text":"Wrapper around shinycssloaders::withSpinner() different default color.","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/add_spinner.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add spinner when loading — add_spinner","text":"","code":"add_spinner(obj, spinner = TRUE, color = \"#18bc9c\")"},{"path":"https://tiffanymtang.github.io/nerfplus/reference/add_spinner.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add spinner when loading — add_spinner","text":"obj Object add spinner . spinner Logical. Whether add spinner. color color spinner hex format. Ignored image used.","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/add_spinner.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add spinner when loading — add_spinner","text":"","code":"## DON'T RUN # shiny::htmlOutput({NAME OF UI ELEMENT}) |> add_spinner()"},{"path":"https://tiffanymtang.github.io/nerfplus/reference/add_tooltip.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a tooltip to an element — add_tooltip","title":"Add a tooltip to an element — add_tooltip","text":"Add tooltip element","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/add_tooltip.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a tooltip to an element — add_tooltip","text":"","code":"add_tooltip(   id,   tooltip,   placement = \"right\",   allowHTML = TRUE,   use_id_only = FALSE,   ... )"},{"path":"https://tiffanymtang.github.io/nerfplus/reference/add_tooltip.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a tooltip to an element — add_tooltip","text":"id id element add tooltip . tooltip tooltip add. placement placement tooltip. allowHTML Whether allow HTML tooltip. use_id_only Whether use id . Default FALSE add namespace 'tooltip-icon' id. Set TRUE tooltip icon added add_tooltip_icon (e.g., tooltip icon added manually). ... Arguments passed tippy_this.","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/add_tooltip.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a tooltip to an element — add_tooltip","text":"element tooltip.","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/add_tooltip_icon.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a tooltip icon to a label — add_tooltip_icon","title":"Add a tooltip icon to a label — add_tooltip_icon","text":"Add tooltip icon label","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/add_tooltip_icon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a tooltip icon to a label — add_tooltip_icon","text":"","code":"add_tooltip_icon(..., id, icon = shiny::icon(\"info-circle\"))"},{"path":"https://tiffanymtang.github.io/nerfplus/reference/add_tooltip_icon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a tooltip icon to a label — add_tooltip_icon","text":"... Arguments passed span element (e.g., label add tooltip ). id id tooltip. icon icon use tooltip.","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/add_tooltip_icon.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a tooltip icon to a label — add_tooltip_icon","text":"label tooltip icon.","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/apply_post_rf_preprocessing.html","id":null,"dir":"Reference","previous_headings":"","what":"Postprocessing helper functions after fitting the RF in NeRF+ models — apply_post_rf_preprocessing","title":"Postprocessing helper functions after fitting the RF in NeRF+ models — apply_post_rf_preprocessing","text":"function applies processing steps data fitting RF NeRF+ models. Specifically, converts factor levels numeric values based levels stored RF model.","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/apply_post_rf_preprocessing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Postprocessing helper functions after fitting the RF in NeRF+ models — apply_post_rf_preprocessing","text":"","code":"apply_post_rf_preprocessing(object, x)"},{"path":"https://tiffanymtang.github.io/nerfplus/reference/apply_post_rf_preprocessing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Postprocessing helper functions after fitting the RF in NeRF+ models — apply_post_rf_preprocessing","text":"object ranger object fitted data. x data frame matrix containing data processed.","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/apply_post_rf_preprocessing.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Postprocessing helper functions after fitting the RF in NeRF+ models — apply_post_rf_preprocessing","text":"data frame matrix structure x, factor levels converted numeric values based levels stored object.","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/checkbox.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapper around prettyCheckbox() — checkbox","title":"Wrapper around prettyCheckbox() — checkbox","text":"Wrapper around prettyCheckbox() different default settings.","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/checkbox.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapper around prettyCheckbox() — checkbox","text":"","code":"checkbox(   inputId,   label,   value = FALSE,   status = \"primary\",   animation = \"jelly\",   icon = shiny::icon(\"check\"),   bigger = TRUE,   ... )"},{"path":"https://tiffanymtang.github.io/nerfplus/reference/checkbox.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapper around prettyCheckbox() — checkbox","text":"inputId input slot used access value. label Display label control. value Initial value (TRUE FALSE). status Add class checkbox, can use Bootstrap status like 'info', 'primary', 'danger', 'warning' 'success'. animation Add animation checkbox checked, value smooth, jelly, tada, rotate, pulse. icon Optional, display icon checkbox, must icon created icon. bigger Scale checkboxes bit bigger (TRUE FALSE). ... Additional arguments pass shinyWidgets::prettyCheckbox().","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/checkbox_group.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapper around prettyCheckboxGroup() — checkbox_group","title":"Wrapper around prettyCheckboxGroup() — checkbox_group","text":"Wrapper around prettyCheckboxGroup() different default settings.","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/checkbox_group.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapper around prettyCheckboxGroup() — checkbox_group","text":"","code":"checkbox_group(   inputId,   label,   choices,   selected = NULL,   status = \"primary\",   animation = \"jelly\",   icon = shiny::icon(\"check\"),   bigger = TRUE,   ... )"},{"path":"https://tiffanymtang.github.io/nerfplus/reference/checkbox_group.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapper around prettyCheckboxGroup() — checkbox_group","text":"inputId input slot used access value. label Display label control. choices List values show checkboxes . elements list named name rather value displayed user. argument provided, choiceNames choiceValues must provided, vice-versa. values strings; types (logicals numbers) coerced strings. selected values initially selected, . status Add class checkbox, can use Bootstrap status like 'info', 'primary', 'danger', 'warning' 'success'. animation Add animation checkbox checked, value smooth, jelly, tada, rotate, pulse. icon Optional, display icon checkbox, must icon created icon. bigger Scale checkboxes bit bigger (TRUE FALSE). ... Additional arguments pass shinyWidgets::prettyCheckboxGroup().","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/css_styler.html","id":null,"dir":"Reference","previous_headings":"","what":"Add css styling — css_styler","title":"Add css styling — css_styler","text":"Add css styling","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/css_styler.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add css styling — css_styler","text":"","code":"css_styler(...)"},{"path":"https://tiffanymtang.github.io/nerfplus/reference/css_styler.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add css styling — css_styler","text":"... number named arguments name css selector value css style value.","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/display_inline.html","id":null,"dir":"Reference","previous_headings":"","what":"Display inline block — display_inline","title":"Display inline block — display_inline","text":"Display inline block","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/display_inline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Display inline block — display_inline","text":"","code":"display_inline(obj)"},{"path":"https://tiffanymtang.github.io/nerfplus/reference/display_inline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Display inline block — display_inline","text":"obj Object display inline.","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/dummy_code.html","id":null,"dir":"Reference","previous_headings":"","what":"Dummy code categorical features — dummy_code","title":"Dummy code categorical features — dummy_code","text":"Dummy code categorical features","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/dummy_code.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dummy code categorical features — dummy_code","text":"","code":"fit_dummy_code(x)  apply_dummy_code(dummy_fit, x)"},{"path":"https://tiffanymtang.github.io/nerfplus/reference/dummy_code.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dummy code categorical features — dummy_code","text":"x data frame matrix containing data dummy-coded. dummy_fit previously fitted dummy coding model; typically output fit_dummy_code().","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/dummy_code.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Dummy code categorical features — dummy_code","text":"fit_dummy_code(), list containing: dummy_fit: fitted dummy coding model, can used dummy-code new data. x: data frame matrix containing dummy-coded data. apply_dummy_code(), data frame matrix containing dummy-coded data.","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/example_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Example dataset for NeRF+ demonstration — example_data","title":"Example dataset for NeRF+ demonstration — example_data","text":"Example dataset NeRF+ demonstration","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/example_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example dataset for NeRF+ demonstration — example_data","text":"","code":"example_data"},{"path":[]},{"path":"https://tiffanymtang.github.io/nerfplus/reference/example_data.html","id":"example-data","dir":"Reference","previous_headings":"","what":"example_data","title":"Example dataset for NeRF+ demonstration — example_data","text":"list following named components: x Training covariate data matrix 80 rows 10 columns. xtest Test covariate data matrix 40 rows 10 columns. y Training response vector 80 elements. ytest Test response vector 40 elements. Training adjacency matrix 80 rows 80 columns. A_full Full adjacency matrix 120 rows 120 columns. covariate data matrix generated standard normal distribution. adjacency matrix generated stochastic block model 3 blocks. responses generated linear model additive network block effect main covariate effect first covariate .","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/fileInputModule.html","id":null,"dir":"Reference","previous_headings":"","what":"File input module - UI — fileInputUI","title":"File input module - UI — fileInputUI","text":"File input module - UI File input module - Server","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/fileInputModule.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"File input module - UI — fileInputUI","text":"","code":"fileInputUI(   id,   label = \"File Upload\",   accept = c(\".csv\", \".txt\", \".rds\"),   show_accept = TRUE,   tooltip = NULL )  fileInputServer(id, default_data = NULL)"},{"path":"https://tiffanymtang.github.io/nerfplus/reference/fit_network_embedding.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapper to fit various network embedding methods — fit_network_embedding","title":"Wrapper to fit various network embedding methods — fit_network_embedding","text":"Wrapper fit various network embedding methods","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/fit_network_embedding.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapper to fit various network embedding methods — fit_network_embedding","text":"","code":"fit_network_embedding(   A,   ndim = 2,   method = c(\"adjacency\", \"laplacian\", \"score\"),   regularization = 0.5,   varimax_rotation = FALSE )"},{"path":"https://tiffanymtang.github.io/nerfplus/reference/fit_network_embedding.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapper to fit various network embedding methods — fit_network_embedding","text":"Adjacency matrix. ndim Number dimensions embedding. method Embedding type(s), least one \"adjacency\", \"laplacian\", score\". regularization Regularization parameter adjacency matrix. varimax_rotation Whether apply varimax rotation embedding.","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/fit_network_embedding.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrapper to fit various network embedding methods — fit_network_embedding","text":"list containing following components: X: list matrices, corresponding method method, matrix ndim columns representing embedding. eval_ls: list eigenvalues corresponding method method. method: method(s) used embedding. regularization: regularization parameter used adjacency matrix.","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/fit_network_embedding.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Wrapper to fit various network embedding methods — fit_network_embedding","text":"","code":"data(example_data) embedding_fit <- fit_network_embedding(   example_data$A, ndim = 2, method = \"laplacian\" )"},{"path":"https://tiffanymtang.github.io/nerfplus/reference/get_feature_importances.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute feature importances for a NeRF+ model — get_feature_importances","title":"Compute feature importances for a NeRF+ model — get_feature_importances","text":"function computes global local feature importances given fitted NeRF+ model.","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/get_feature_importances.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute feature importances for a NeRF+ model — get_feature_importances","text":"","code":"get_feature_importances(   object,   x,   x_embed = NULL,   y = NULL,   A_full,   nodeids = NULL,   method = c(\"permute\", \"mdi+\", \"local\"),   B = 10,   metric = NULL )"},{"path":"https://tiffanymtang.github.io/nerfplus/reference/get_feature_importances.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute feature importances for a NeRF+ model — get_feature_importances","text":"object fitted NeRF+ model object. x data frame matrix used compute feature importances. x_embed optional data frame matrix network embeddings corresponding samples x. needed training embeddings manually inputted. y vector responses. A_full adjacency matrix representing network structure full set nodes (training + testing nodes order) nodeids (Optional) vector node IDs length n. provided, node IDs indicate rows , corresponding sample. provided, rows assumed order rows x y. method character string indicating method use computing feature importances. Options : \"permute\": Permutation-based global feature importance. \"mdi+\": MDI+ global feature importance. \"local\": Local feature importance. B Number samples permutation-based feature importance. Ignored method \"permute\". metric function compute metric used global feature importances. Defaults R-squared regression AUROC classification. Ignored method \"local\".","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/get_feature_importances.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute feature importances for a NeRF+ model — get_feature_importances","text":"method \"permute\" \"mdi+\", tibble two columns: var: name feature. importance: computed feature importance score. method \"local\", n x p","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/get_feature_importances.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute feature importances for a NeRF+ model — get_feature_importances","text":"","code":"# \\donttest{ data(example_data) nerfplus_out <- nerfplus(   x = example_data$x, y = example_data$y, A = example_data$A,   lambda_netcoh = 1,   lambda_embed = 0.1,   lambda_raw = 2,   lambda_stump = 3,   family = \"linear\", embedding = \"laplacian\", sample_split = \"none\" ) fi_out <- get_feature_importances(   nerfplus_out, x = example_data$xtest, y = example_data$ytest,   A_full = example_data$A_full, method = \"mdi+\" ) # }"},{"path":"https://tiffanymtang.github.io/nerfplus/reference/get_forest_paths.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract all root-to-leaf paths in a forest. — get_forest_paths","title":"Extract all root-to-leaf paths in a forest. — get_forest_paths","text":"Extract root--leaf paths forest.","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/get_forest_paths.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract all root-to-leaf paths in a forest. — get_forest_paths","text":"","code":"get_forest_paths(tree_infos)"},{"path":"https://tiffanymtang.github.io/nerfplus/reference/get_forest_paths.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract all root-to-leaf paths in a forest. — get_forest_paths","text":"tree_infos List size ntrees entry output ranger::treeInfo().","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/get_forest_paths.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract all root-to-leaf paths in a forest. — get_forest_paths","text":"list size ntrees entry list decision paths tree.","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/get_icon.html","id":null,"dir":"Reference","previous_headings":"","what":"Get html snippet for built-in icons. — get_icon","title":"Get html snippet for built-in icons. — get_icon","text":"Get html snippet built-icons.","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/get_icon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get html snippet for built-in icons. — get_icon","text":"","code":"get_icon(src, width = 20, height = 20, ...)"},{"path":"https://tiffanymtang.github.io/nerfplus/reference/get_icon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get html snippet for built-in icons. — get_icon","text":"src Name built-icon. width Width icon pixels. height Height icon pixels. ... Additional arguments pass htmltools::img().","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/get_icon.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get html snippet for built-in icons. — get_icon","text":"Character vector icon path.","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/get_icons.html","id":null,"dir":"Reference","previous_headings":"","what":"Return custom icons — get_icons","title":"Return custom icons — get_icons","text":"Return custom icons","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/get_icons.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return custom icons — get_icons","text":"","code":"get_icons(icon_names, width = 20, height = 20, ...)"},{"path":"https://tiffanymtang.github.io/nerfplus/reference/get_icons.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return custom icons — get_icons","text":"icon_names Name(s) built-icons return. width Width icon pixels. height Height icon pixels. ... Additional arguments pass htmltools::img().","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/get_icons.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return custom icons — get_icons","text":"Named character vector html snippets display icons","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/get_loo.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Leave-One-Out (LOO) predictions and parameter changes for a NeRF+ model — get_loo","title":"Compute Leave-One-Out (LOO) predictions and parameter changes for a NeRF+ model — get_loo","text":"function computes leave-one-(LOO) predictions parameter changes fitted NeRF+ model. sample, computes model's predictions parameter estimates sample left training data. useful assessing model stability identifying influential observations.","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/get_loo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Leave-One-Out (LOO) predictions and parameter changes for a NeRF+ model — get_loo","text":"","code":"get_loo(   object,   x,   x_embed = NULL,   y,   A = NULL,   xtest = NULL,   xtest_embed = NULL,   ytest = NULL,   A_full = NULL,   nodeids = NULL,   nodeids_test = NULL,   metric = NULL,   return_all = FALSE )"},{"path":"https://tiffanymtang.github.io/nerfplus/reference/get_loo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Leave-One-Out (LOO) predictions and parameter changes for a NeRF+ model — get_loo","text":"object fitted NeRF+ model object. x data frame matrix containing training data. x_embed optional data frame matrix network embeddings corresponding training samples. needed training embeddings manually inputted. y vector responses training data. adjacency matrix representing network structure training nodes. xtest optional data frame matrix containing test data. xtest_embed optional data frame matrix network embeddings corresponding test samples. ytest optional vector responses test data. A_full optional adjacency matrix representing network structure full set nodes (training + testing nodes order). nodeids optional vector node IDs length n. provided, node IDs indicate rows corresponding sample. provided, rows assumed order rows x y. nodeids_test optional vector node IDs test data. metric optional function compute metric used evaluating prediction changes. NULL, defaults RMSE linear models AUROC logistic models. return_all Logical indicating whether return intermediate results tree forest. Defaults FALSE.","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/get_loo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Leave-One-Out (LOO) predictions and parameter changes for a NeRF+ model — get_loo","text":"list containing: loo_params list LOO parameter estimates tree. change_alphas Matrix changes alpha parameters sample left . mean_change_alphas Mean change alpha parameters across trees. mean_change_betas Mean change beta parameters across trees. loo_preds Matrix LOO predictions, column corresponds predictions different sample left . loo_preds_test Matrix LOO predictions test data (provided). mean_change_error_test Mean change prediction error test data across trees (provided). mean_change_preds_test Mean change predictions test data across trees (provided).","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/get_loo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute Leave-One-Out (LOO) predictions and parameter changes for a NeRF+ model — get_loo","text":"","code":"# \\donttest{ data(example_data) nerfplus_out <- nerfplus(   x = example_data$x, y = example_data$y, A = example_data$A,   lambda_netcoh = 1,   lambda_embed = 0.1,   lambda_raw = 2,   lambda_stump = 3,   family = \"linear\", embedding = \"laplacian\", sample_split = \"none\" ) loo_out <- get_loo(   nerfplus_out,   x = example_data$x, y = example_data$y, A = example_data$A,   xtest = example_data$xtest, ytest = example_data$ytest,   A_full = example_data$A_full ) # }"},{"path":"https://tiffanymtang.github.io/nerfplus/reference/get_tree_paths.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract all root-to-leaf paths in a tree. — get_tree_paths","title":"Extract all root-to-leaf paths in a tree. — get_tree_paths","text":"Extract root--leaf paths tree.","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/get_tree_paths.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract all root-to-leaf paths in a tree. — get_tree_paths","text":"","code":"get_tree_paths(tree_info)"},{"path":"https://tiffanymtang.github.io/nerfplus/reference/get_tree_paths.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract all root-to-leaf paths in a tree. — get_tree_paths","text":"tree_info Output ranger::treeInfo() single tree.","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/get_tree_paths.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract all root-to-leaf paths in a tree. — get_tree_paths","text":"list decision paths single tree.","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/hr_short.html","id":null,"dir":"Reference","previous_headings":"","what":"Short horizontal rule — hr_short","title":"Short horizontal rule — hr_short","text":"Short horizontal rule","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/hr_short.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Short horizontal rule — hr_short","text":"","code":"hr_short(   margin_left = \"105px\",   margin_right = margin_left,   color = \"lightblue\" )"},{"path":"https://tiffanymtang.github.io/nerfplus/reference/hr_short.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Short horizontal rule — hr_short","text":"margin_left Left margin. margin_right Right margin. color Color line.","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/iconRadioGroupUI.html","id":null,"dir":"Reference","previous_headings":"","what":"Radio group button with icons — iconRadioGroupUI","title":"Radio group button with icons — iconRadioGroupUI","text":"Wrapper around radio_group_buttons options display icons float buttons right.","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/iconRadioGroupUI.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Radio group button with icons — iconRadioGroupUI","text":"","code":"iconRadioGroupUI(   id,   ns_id,   choices,   selected = NULL,   individual = FALSE,   size = \"normal\",   justified = FALSE,   float_right = FALSE,   ... )"},{"path":"https://tiffanymtang.github.io/nerfplus/reference/iconRadioGroupUI.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Radio group button with icons — iconRadioGroupUI","text":"id Unique identifier. choices Choices must subset \"ggplot\", \"plotly\", \"table\" selected initially selected value. specified, defaults first item choices. start items selected, use character(0). individual TRUE, buttons separated. size Size buttons ('xs', 'sm', 'normal', 'lg') justified TRUE, fill width parent div float_right Logical. Whether float buttons right. ... Additional arguments pass radio_group_buttons","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/interpret_nerfplus.html","id":null,"dir":"Reference","previous_headings":"","what":"Interpret NeRF+ Model — interpret_nerfplus","title":"Interpret NeRF+ Model — interpret_nerfplus","text":"Wrapper function around get_feature_importances() get_loo(). Helpful format results correctly input NeRF+ Interpreter Shiny application.","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/interpret_nerfplus.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Interpret NeRF+ Model — interpret_nerfplus","text":"","code":"interpret_nerfplus(   object,   x,   x_embed = NULL,   y,   A,   nodeids = NULL,   xtest,   xtest_embed = NULL,   ytest,   A_full,   nodeids_test = NULL,   methods = c(\"permute\", \"mdi+\", \"local\", \"loo\"),   B = 10,   metric = NULL,   save = FALSE,   save_dir = \"results_nerfplus\" )"},{"path":"https://tiffanymtang.github.io/nerfplus/reference/interpret_nerfplus.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Interpret NeRF+ Model — interpret_nerfplus","text":"object fitted NeRF+ model object. x data frame matrix containing training data. x_embed optional data frame matrix network embeddings corresponding training samples. needed training embeddings manually inputted. y vector responses training data. adjacency matrix representing network structure training nodes. nodeids optional vector node IDs length n. provided, node IDs indicate rows corresponding sample. provided, rows assumed order rows x y. xtest optional data frame matrix containing test data. xtest_embed optional data frame matrix network embeddings corresponding test samples. ytest optional vector responses test data. A_full optional adjacency matrix representing network structure full set nodes (training + testing nodes order). nodeids_test optional vector node IDs test data. methods character vector methods run. Can include \"permute\", \"mdi+\", \"local\", \"loo\". B Number permutations use permutation feature importance. metric function compute metric used global feature importances. Defaults R-squared regression AUROC classification. save Whether save results disk. save_dir Directory save results save = TRUE.","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/interpret_nerfplus.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Interpret NeRF+ Model — interpret_nerfplus","text":"list following components: object fitted NeRF+ model. data_list list containing data used interpretation. fi_results list containing feature importance results. loo_results list containing sample influence results.","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/interpret_nerfplus.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Interpret NeRF+ Model — interpret_nerfplus","text":"","code":"# \\donttest{ data(example_data) nerfplus_out <- nerfplus(   x = example_data$x, y = example_data$y, A = example_data$A,   lambda_netcoh = 1,   lambda_embed = 0.1,   lambda_raw = 2,   lambda_stump = 3,   family = \"linear\", embedding = \"laplacian\", sample_split = \"none\" ) out <- interpret_nerfplus(   nerfplus_out, x = example_data$x, y = example_data$y, A = example_data$A,   xtest = example_data$xtest, ytest = example_data$ytest,   A_full = example_data$A_full ) # }"},{"path":"https://tiffanymtang.github.io/nerfplus/reference/material_switch.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapper around materialSwitch() — material_switch","title":"Wrapper around materialSwitch() — material_switch","text":"Wrapper around materialSwitch() different default settings.","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/material_switch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapper around materialSwitch() — material_switch","text":"","code":"material_switch(   inputId,   label,   value = TRUE,   status = \"primary\",   right = FALSE,   inline = FALSE,   ... )"},{"path":"https://tiffanymtang.github.io/nerfplus/reference/material_switch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapper around materialSwitch() — material_switch","text":"inputId input slot used access value. label Input label. value TRUE FALSE. status Color, must valid Bootstrap status : default, primary, info, success, warning, danger. right label right? default FALSE. inline Display input inline, want place buttons next . ... Additional arguments pass shinyWidgets::materialSwitch().","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/nerfplus.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit Network-assisted Random Forest+ (NeRF+) — nerfplus","title":"Fit Network-assisted Random Forest+ (NeRF+) — nerfplus","text":"Fit Network-assisted Random Forest+ (NeRF+)","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/nerfplus.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit Network-assisted Random Forest+ (NeRF+) — nerfplus","text":"","code":"nerfplus(   x,   y,   A = NULL,   nodeids = NULL,   family = c(\"linear\", \"logistic\"),   include_raw = TRUE,   include_netcoh = TRUE,   embedding = NULL,   embedding_options = list(ndim = 2, regularization = 0.5, varimax = FALSE, center =     TRUE, scale = TRUE),   standardize_x = TRUE,   normalize_stump = FALSE,   sample_split = c(\"none\", \"oob\", \"inbag\"),   ntrees = 500,   mtry = NULL,   lambda_netcoh,   lambda_embed = lambda_raw,   lambda_raw = lambda_stump,   lambda_stump,   lambda_l = 0.05,   parallel = FALSE,   num.threads = 1,   ... )"},{"path":"https://tiffanymtang.github.io/nerfplus/reference/nerfplus.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit Network-assisted Random Forest+ (NeRF+) — nerfplus","text":"x numeric matrix data frame predictors (features); size n x p. centered column mean 0. y numeric vector responses length n. centered mean 0. adjacency matrix representing network structure. nodeids (Optional) vector node IDs length n. provided, node IDs indicate rows , corresponding sample. provided, rows assumed order rows x y. family character string indicating type model fit. Currently, \"linear\" \"logistic\" supported. include_raw Logical indicating whether include raw covariates NeRF+ model. Default TRUE. include_netcoh Logical indicating whether include individual node effects network cohesion regularization NeRF+ model. Default TRUE. embedding Embedding type(s), least one \"adjacency\", \"laplacian\", score\", NULL (.e., include network embedding features). Alternatively, can directly input n x d matrix network embedding features corresponding x. embedding_options list options network embedding. Ignored embedding = NULL. provided, list contain following components: ndim: Number dimensions embedding (default 2). regularization: Regularization parameter adjacency matrix (default 0.5). varimax: Whether apply varimax rotation embedding (default FALSE). center: Whether center embedding column mean 0 (default TRUE). scale: Whether scale embedding first embedding component column SD 1 (default TRUE). embedding components scaled, proportional eigenvalues. standardize_x Logical indicating whether standardize covariates column mean 0 SD 1. Default TRUE. normalize_stump Logical indicating whether normalize decision stump features number samples children nodes. Default FALSE. sample_split Character string indicating split samples training model; one \"none\" (default), \"oob\", \"inbag\". \"none\", samples used estimating coefficients NeRF+. \"oob\", --bag samples used estimating coefficients NeRF+. \"inbag\", -bag samples used estimating coefficients NeRF+. ntrees Number trees ensemble. mtry Number features consider split. Default number features / 3 regression square root number features classification. lambda_netcoh Regularization parameter network cohesion term. Can either scalar vector length ntrees, specifying regularization parameter tree. Ignored include_netcoh = FALSE. lambda_embed Regularization parameter network embedding features. Default lambda_raw. Can either scalar vector length ntrees, specifying regularization parameter tree. Ignored embedding = NULL. lambda_raw Regularization parameter raw covariates. Default lambda_stump. Can either scalar vector length ntrees, specifying regularization parameter tree. Ignored include_raw = FALSE. lambda_stump Regularization parameter decision stump features. Can either scalar vector length ntrees, specifying regularization parameter tree. lambda_l (Optional) Regularization parameter graph Laplacian. Default 0.05. Can either scalar vector length ntrees, specifying regularization parameter tree. parallel Logical indicating whether use parallel processing. num.threads Number threads use parallel processing. Default 1. Ignored parallel = FALSE. ... Additional arguments passed ranger::ranger() function fitting random forest model.","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/nerfplus.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit Network-assisted Random Forest+ (NeRF+) — nerfplus","text":"list containing following: rf_fit: fitted random forest model object ranger::ranger(). nerfplus_fits: list fitted NeRF+ models tree random forest. element list fitted model object can used make predictions. tree_infos: list tree information objects tree random forest. pre_rf_preprocessing_info: list containing preprocessing information NeRF+ model; output fit_pre_rf_preprocessing(). regularization_params: list containing regularization parameters used NeRF+ model model_info: list containing information model, family, include_raw, include_netcoh, normalize_stump, sample_split. unordered_factors: character vector variable names unordered factors.","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/nerfplus.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit Network-assisted Random Forest+ (NeRF+) — nerfplus","text":"","code":"data(example_data) nerfplus_out <- nerfplus(   x = example_data$x, y = example_data$y, A = example_data$A,   lambda_netcoh = 1,   lambda_embed = 0.1,   lambda_raw = 2,   lambda_stump = 3,   family = \"linear\", embedding = \"laplacian\", sample_split = \"none\" )"},{"path":"https://tiffanymtang.github.io/nerfplus/reference/nerfplus_augmentation.html","id":null,"dir":"Reference","previous_headings":"","what":"Augment Psi matrix in NeRF+ with raw features — nerfplus_augmentation","title":"Augment Psi matrix in NeRF+ with raw features — nerfplus_augmentation","text":"helper functions augment Psi matrix NeRF+ raw features. Moreover, raw features dummy-coded categorical.","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/nerfplus_augmentation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Augment Psi matrix in NeRF+ with raw features — nerfplus_augmentation","text":"","code":"fit_augmentation(x, psi, tree_info = NULL, include_raw = TRUE)  apply_augmentation(   x,   psi,   tree_info = NULL,   include_raw = TRUE,   dummy_fit = NULL )"},{"path":"https://tiffanymtang.github.io/nerfplus/reference/nerfplus_augmentation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Augment Psi matrix in NeRF+ with raw features — nerfplus_augmentation","text":"x data frame matrix containing raw features. psi data frame matrix containing Psi matrix, column corresponds decision stump feature. tree_info Output ranger::treeInfo() single tree. include_raw Logical indicating whether include raw covariates NeRF+ model. Default TRUE. dummy_fit previously fitted dummy coding model; typically output fit_dummy_code(). include_raw = TRUE, used dummy-code raw features.","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/nerfplus_augmentation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Augment Psi matrix in NeRF+ with raw features — nerfplus_augmentation","text":"fit_augmentation(), list containing: x: matrix containing augmented data, includes raw features (include_raw = TRUE) Psi features. dummy_fit: fitted dummy coding model, dummy-codes categorical features. apply_augmentation(), matrix containing augmented data, includes raw features (include_raw = TRUE) Psi features. include_raw = FALSE, Psi features returned.","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/nerfplus_cv.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit Network-assisted Random Forest+ (NeRF+) with Cross-Validation — nerfplus_cv","title":"Fit Network-assisted Random Forest+ (NeRF+) with Cross-Validation — nerfplus_cv","text":"Fit Network-assisted Random Forest+ (NeRF+) Cross-Validation","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/nerfplus_cv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit Network-assisted Random Forest+ (NeRF+) with Cross-Validation — nerfplus_cv","text":"","code":"nerfplus_cv(   x,   y,   A = NULL,   nodeids = NULL,   cv = 5,   cv_foldids = NULL,   family = c(\"linear\", \"logistic\"),   include_raw = TRUE,   include_netcoh = TRUE,   embedding = NULL,   embedding_options = list(ndim = 2, regularization = 0.5, varimax = FALSE, center =     TRUE, scale = TRUE),   standardize_x = TRUE,   normalize_stump = FALSE,   sample_split = c(\"none\", \"oob\", \"inbag\"),   ntrees = 500,   ntrees_cv = ntrees,   mtry = NULL,   lambdas_netcoh,   lambdas_embed = NULL,   lambdas_raw = NULL,   lambdas_stump,   lambdas_l = 0.05,   parallel = FALSE,   num.threads = 1,   ... )"},{"path":"https://tiffanymtang.github.io/nerfplus/reference/nerfplus_cv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit Network-assisted Random Forest+ (NeRF+) with Cross-Validation — nerfplus_cv","text":"x numeric matrix data frame predictors (features); size n x p. centered column mean 0. y numeric vector responses length n. centered mean 0. adjacency matrix representing network structure. nodeids (Optional) vector node IDs length n. provided, node IDs indicate rows , corresponding sample. provided, rows assumed order rows x y. cv Number cross-validation folds. Default 5. cv_foldids (Optional) List length cv, component list vector sample indices fold. NULL (default), cross-validation folds created randomly. family character string indicating type model fit. Currently, \"linear\" \"logistic\" supported. include_raw Logical indicating whether include raw covariates NeRF+ model. Default TRUE. include_netcoh Logical indicating whether include individual node effects network cohesion regularization NeRF+ model. Default TRUE. embedding Embedding type(s), least one \"adjacency\", \"laplacian\", score\", NULL (.e., include network embedding features). Alternatively, can directly input n x d matrix network embedding features corresponding x. embedding_options list options network embedding. Ignored embedding = NULL. provided, list contain following components: ndim: Number dimensions embedding (default 2). regularization: Regularization parameter adjacency matrix (default 0.5). varimax: Whether apply varimax rotation embedding (default FALSE). center: Whether center embedding column mean 0 (default TRUE). scale: Whether scale embedding first embedding component column SD 1 (default TRUE). embedding components scaled, proportional eigenvalues. standardize_x Logical indicating whether standardize covariates column mean 0 SD 1. Default TRUE. normalize_stump Logical indicating whether normalize decision stump features number samples children nodes. Default FALSE. sample_split Character string indicating split samples training model; one \"none\" (default), \"oob\", \"inbag\". \"none\", samples used estimating coefficients NeRF+. \"oob\", --bag samples used estimating coefficients NeRF+. \"inbag\", -bag samples used estimating coefficients NeRF+. ntrees Number trees ensemble. ntrees_cv Number trees tuned using cross-validation. Default ntrees (.e., every tree tuned). Reduce number speed cross-validation process. trees tuned, hyperparameter chosen randomly tuned trees. mtry Number features consider split. Default number features / 3 regression square root number features classification. lambdas_netcoh Vector regularization parameters network cohesion term. lambdas_embed Vector regularization parameters network embedding features. NULL, regularization parameter corresponding network embedding features equal regularization parameter raw covariates. lambdas_raw Vector regularization parameters raw covariate features. NULL, regularization parameter raw covariates equal regularization parameter decision stump features. lambdas_stump Vector regularization parameters decision stump features. lambdas_l Vector regularization parameters graph Laplacian. parallel Logical indicating whether use parallel processing. num.threads Number threads use parallel processing. Default 1. Ignored parallel = FALSE. ... Additional arguments passed ranger::ranger() function fitting random forest model.","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/nerfplus_cv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit Network-assisted Random Forest+ (NeRF+) with Cross-Validation — nerfplus_cv","text":"list containing following: rf_fit: fitted random forest model object ranger::ranger(). nerfplus_fits: list fitted NeRF+ models tree random forest using tuned hyperparameters. element list fitted model object can used make predictions. cv_losses: list ntrees_cv data frames containing cross-validation losses tree fold. item list corresponds tree random forest. row data frame corresponds different set hyperparameters. best_cv_params: data frame containing used hyperparameters tree random forest. tree_infos: list tree information objects tree random forest. pre_rf_preprocessing_info: list containing preprocessing information NeRF+ model; output fit_pre_rf_preprocessing(). regularization_params: list containing regularization parameters used NeRF+ model model_info: list containing information model, family, include_raw, include_netcoh, normalize_stump, sample_split. unordered_factors: character vector variable names unordered factors.","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/nerfplus_cv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit Network-assisted Random Forest+ (NeRF+) with Cross-Validation — nerfplus_cv","text":"","code":"# \\donttest{ data(example_data) nerfplus_cv_out <- nerfplus_cv(   x = example_data$x, y = example_data$y, A = example_data$A,   lambdas_netcoh = c(0.1, 1),   lambdas_embed = c(0, 0.1),   lambdas_raw = c(1, 2),   lambdas_stump = c(1, 2),   family = \"linear\", embedding = \"laplacian\", sample_split = \"none\" ) # }"},{"path":"https://tiffanymtang.github.io/nerfplus/reference/nerfplus_preprocessing.html","id":null,"dir":"Reference","previous_headings":"","what":"Preprocessing helper functions prior to fitting the RF in NeRF+ models — nerfplus_preprocessing","title":"Preprocessing helper functions prior to fitting the RF in NeRF+ models — nerfplus_preprocessing","text":"functions fit apply preprocessing steps prior fitting RF NeRF+ models. Specifically, function standardizes numeric features mean 0 SD 1 (standardize = TRUE) augments data (standardized) network embeddings (embedding specified).","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/nerfplus_preprocessing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Preprocessing helper functions prior to fitting the RF in NeRF+ models — nerfplus_preprocessing","text":"","code":"fit_pre_rf_preprocessing(   x,   A = NULL,   standardize = TRUE,   embedding = NULL,   embedding_options = list(ndim = 2, regularization = 0.5, varimax = FALSE, center =     FALSE, scale = FALSE),   nodeids = NULL )  apply_pre_rf_preprocessing(   preprocess_fit,   x,   x_embed = NULL,   A_full,   nodeids = NULL )"},{"path":"https://tiffanymtang.github.io/nerfplus/reference/nerfplus_preprocessing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Preprocessing helper functions prior to fitting the RF in NeRF+ models — nerfplus_preprocessing","text":"x numeric matrix data frame predictors (features); size n x p. centered column mean 0. adjacency matrix representing network structure. standardize Logical indicating whether standardize numeric features x mean 0 SD 1. Defaults TRUE. embedding Embedding type(s), least one \"adjacency\", \"laplacian\", score\", NULL (.e., include network embedding features). Alternatively, can directly input n x d matrix network embedding features corresponding x. embedding_options list options network embedding. Ignored embedding = NULL. provided, list contain following components: ndim: Number dimensions embedding (default 2). regularization: Regularization parameter adjacency matrix (default 0.5). varimax: Whether apply varimax rotation embedding (default FALSE). center: Whether center embedding column mean 0 (default TRUE). scale: Whether scale embedding first embedding component column SD 1 (default TRUE). embedding components scaled, proportional eigenvalues. nodeids (Optional) vector node IDs length n. provided, node IDs indicate rows , corresponding sample. provided, rows assumed order rows x y. preprocess_fit Output fit_pre_rf_preprocessing() applied new data. x_embed Optional embedding data frame matrix, whose rows aligned x. provided, used augment input x data. needed training embeddings manually inputted. A_full adjacency matrix representing network structure full set nodes (training + testing nodes order).","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/nerfplus_preprocessing.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Preprocessing helper functions prior to fitting the RF in NeRF+ models — nerfplus_preprocessing","text":"fit_pre_rf_preprocessing(), list containing following components: x: preprocessed data frame standardize_x: Logical indicating whether raw data standardized x_center_factors: Named numeric vector means used standardization x_scale_factors: Named numeric vector standard deviations used standardization embedding: method used embedding embedding_fit: output network embedding fit embed_center_factors: Named numeric vector means used standardizing embeddings embed_scale_factors: Named numeric vector standard deviations used standardizing embeddings nodeids: node IDs provided embeddings. apply_pre_rf_preprocessing(), data frame preprocessed data.","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/nerfplus_psi.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the Psi matrix in NeRF+ containing decision stump features — nerfplus_psi","title":"Get the Psi matrix in NeRF+ containing decision stump features — nerfplus_psi","text":"helper functions fit apply previously fitted Psi mapping (.e., decision stump feature mapping) data.","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/nerfplus_psi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the Psi matrix in NeRF+ containing decision stump features — nerfplus_psi","text":"","code":"fit_psi(   x,   tree_info,   tree_paths,   node_preds,   unordered_factors = NULL,   normalize = FALSE,   inbag_counts = NULL )  apply_psi(   x,   tree_info,   tree_paths,   node_preds,   unordered_factors = NULL,   psi_unique_values = NULL )"},{"path":"https://tiffanymtang.github.io/nerfplus/reference/nerfplus_psi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the Psi matrix in NeRF+ containing decision stump features — nerfplus_psi","text":"x data frame matrix containing data feed decision tree obtain Psi (.e., decision stump features) matrix. tree_info Output ranger::treeInfo() single tree. tree_paths List size ntrees paths tree; typically output get_forest_paths(). node_preds Matrix terminal node predictions tree random forest; typically, output predict(rf_fit, x, type = \"terminalNodes\")$predictions, rf_fit fitted ranger object x data frame matrix. unordered_factors Vector column names corresponding unordered factor variables data. normalize Logical indicating whether normalize Psi matrix number training samples child node. Defaults FALSE. inbag_counts List size ntrees inbag counts tree; typically output rf_fit$inbag.counts, rf_fit fitted ranger object. Ignored normalize = FALSE. psi_unique_values named list unique values Psi feature, typically obtained output fit_psi().","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/nerfplus_psi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the Psi matrix in NeRF+ containing decision stump features — nerfplus_psi","text":"fit_psi(), list two: psi: data frame containing Psi matrix, column corresponds decision stump feature psi_unique_values: named list unique values Psi feature (returned normalize = TRUE). apply_psi(), data frame containing Psi matrix, column corresponds decision stump feature.","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/oos_network_embedding.html","id":null,"dir":"Reference","previous_headings":"","what":"Out-of-sample network embedding method — oos_network_embedding","title":"Out-of-sample network embedding method — oos_network_embedding","text":"function takes --sample points (available training time) embeds previously trained network embedding space.","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/oos_network_embedding.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Out-of-sample network embedding method — oos_network_embedding","text":"","code":"oos_network_embedding(embedding_fit, A, A_full)"},{"path":"https://tiffanymtang.github.io/nerfplus/reference/oos_network_embedding.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Out-of-sample network embedding method — oos_network_embedding","text":"embedding_fit Previously trained network embedding; output fit_network_embedding(). Adjacency matrix corresponding training data points. A_full Adjacency matrix representing full set nodes (training + testing nodes order).","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/oos_network_embedding.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Out-of-sample network embedding method — oos_network_embedding","text":"list two: X: list matrices, corresponding method embedding_fit$method, matrix ndim columns representing embedding --sample points. method: method(s) used embedding.","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/oos_network_embedding.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Out-of-sample network embedding method — oos_network_embedding","text":"","code":"data(example_data) embedding_fit <- fit_network_embedding(   example_data$A, ndim = 2, method = \"laplacian\" ) oos_embedding <- oos_network_embedding(   embedding_fit, A = example_data$A, A_full = example_data$A_full )"},{"path":"https://tiffanymtang.github.io/nerfplus/reference/options_dropdown.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapper around dropdown() — options_dropdown","title":"Wrapper around dropdown() — options_dropdown","text":"Wrapper around dropdown() different default settings","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/options_dropdown.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapper around dropdown() — options_dropdown","text":"","code":"options_dropdown(   ...,   status = \"primary\",   size = \"sm\",   icon = shiny::icon(\"cog\"),   width = \"300px\",   right = TRUE,   style = \"material-circle\",   tooltip = FALSE )"},{"path":"https://tiffanymtang.github.io/nerfplus/reference/options_dropdown.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapper around dropdown() — options_dropdown","text":"... List tag displayed dropdown menu. status Color button, see actionBttn(). size Size button : xs,sm, md, lg. icon optional icon appear button. width Width dropdown menu content. right Logical. dropdown menu starts right. style Style button, choose simple, bordered, minimal, stretch, jelly, gradient, fill, material-circle, material-flat, pill, float, unite. tooltip Put tooltip button, can customize tooltip tooltipOptions().","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/picker_input.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapper around pickerInput() to select one choice — picker_input","title":"Wrapper around pickerInput() to select one choice — picker_input","text":"Wrapper around pickerInput() select one choice different default settings.","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/picker_input.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapper around pickerInput() to select one choice — picker_input","text":"","code":"picker_input(inputId, label, choices, selected = NULL, options = NULL, ...)"},{"path":"https://tiffanymtang.github.io/nerfplus/reference/picker_input.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapper around pickerInput() to select one choice — picker_input","text":"inputId input slot used access value. label Display label control, NULL label. choices List values select . elements list named name rather value displayed user. selected initially selected value (multiple values multiple = TRUE). specified defaults first value single-select lists values multiple select lists. options List options, see pickerOptions available options. limit number selection possible, see example . ... Additional arguments pass shinyWidgets::pickerInput().","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/plotModule.html","id":null,"dir":"Reference","previous_headings":"","what":"Basic plot module - UI — plotUI","title":"Basic plot module - UI — plotUI","text":"Basic plot module - UI Basic plot module - Server","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/plotModule.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Basic plot module - UI — plotUI","text":"","code":"plotUI(id, border = FALSE, spinner = FALSE)  plotServer(   id,   plot_fun,   plot_options = TRUE,   modes = c(\"ggplot\", \"plotly\"),   border = FALSE,   spinner = TRUE,   error_msg = \"\" )"},{"path":"https://tiffanymtang.github.io/nerfplus/reference/plotOptionsUI.html","id":null,"dir":"Reference","previous_headings":"","what":"Basic Plot Options — plotOptionsUI","title":"Basic Plot Options — plotOptionsUI","text":"Basic Plot Options","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/plotOptionsUI.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Basic Plot Options — plotOptionsUI","text":"","code":"plotOptionsUI(   id,   multicol = FALSE,   heatmap = FALSE,   strip_options = FALSE,   total_width = 12,   height = 500,   x_axis_text_size = 12,   y_axis_text_size = 12,   legend_text_size = 12,   strip_text_size = 14,   x_axis_title_size = 14,   y_axis_title_size = 14,   legend_title_size = 14,   title_size = 16,   axis_line_width = 1,   x_text_angle = FALSE,   strip_text_color = \"white\",   bg_color = \"grey98\",   other_options = NULL )"},{"path":"https://tiffanymtang.github.io/nerfplus/reference/plotOptionsUI.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Basic Plot Options — plotOptionsUI","text":"id Unique identifier. multicol Logical. TRUE, use multiple columns. heatmap Logical. TRUE, include heatmap options. strip_options Logical. TRUE, include strip options. total_width Total width html element. height Height html element. x_axis_text_size Default size x-axis text. y_axis_text_size Default size y-axis text. legend_text_size Default size legend text. strip_text_size Default size strip text. x_axis_title_size Default size x-axis title. y_axis_title_size Default size y-axis title. legend_title_size Default size legend title. title_size Default size title. axis_line_width Default width axis lines. x_text_angle Default angle x-axis text. FALSE, x-axis text horizontal. Otherwise, angled 45 degrees. strip_text_color Default color strip text. bg_color Default background color. other_options Additional shiny widgets/tags add plot options.","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/plotOptionsUI.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Basic Plot Options — plotOptionsUI","text":"List shiny tags.","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/predict.nerfplus.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict method for a NeRF+ model — predict.nerfplus","title":"Predict method for a NeRF+ model — predict.nerfplus","text":"Predict method NeRF+ model","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/predict.nerfplus.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict method for a NeRF+ model — predict.nerfplus","text":"","code":"# S3 method for class 'nerfplus' predict(   object,   x,   x_embed = NULL,   A_full,   nodeids = NULL,   type = c(\"response\", \"alpha\"),   return_all = FALSE )"},{"path":"https://tiffanymtang.github.io/nerfplus/reference/predict.nerfplus.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict method for a NeRF+ model — predict.nerfplus","text":"object fitted NeRF+ model object. x data frame matrix new data predictions made. x_embed Optional embedding data frame matrix, whose rows aligned x. provided, used augment input x data. needed training embeddings manually inputted. A_full adjacency matrix representing network structure full set nodes (training + testing nodes order). Note: nrow(x) == nrow(A_full), x assumed training data. nodeids (Optional) vector node IDs length equal nrows x. provided, node IDs indicate rows A_full, corresponding sample. provided, rows A_full assumed order (x_train, x). type Type prediction return; one \"response\" (default) \"alpha\". \"response\", predicted values returned. \"alpha\", estimated individual node effects returned. return_all TRUE, returns list predictions tree ensemble. FALSE (default), returns average prediction across trees.","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/predict.nerfplus.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict method for a NeRF+ model — predict.nerfplus","text":"return_all = FALSE, function returns vector predicted values (type = \"response\") estimated individual node effects (type = \"alpha\"). return_all = TRUE, function returns list predicted values estimated individual node effects, element list corresponds different tree ensemble.","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/predict.nerfplus.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predict method for a NeRF+ model — predict.nerfplus","text":"","code":"data(example_data) nerfplus_out <- nerfplus(   x = example_data$x, y = example_data$y, A = example_data$A,   lambda_netcoh = 1,   lambda_embed = 0.1,   lambda_raw = 2,   lambda_stump = 3,   family = \"linear\", embedding = \"laplacian\", sample_split = \"none\" ) predicted_y <- predict(   nerfplus_out, x = example_data$xtest, A_full = example_data$A_full,   type = \"response\" ) estimated_alphas <- predict(   nerfplus_out, x = example_data$xtest, A_full = example_data$A_full,   type = \"alpha\" )"},{"path":"https://tiffanymtang.github.io/nerfplus/reference/predict.rnc.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict method for rnc (regression with network cohesion) objects — predict.rnc","title":"Predict method for rnc (regression with network cohesion) objects — predict.rnc","text":"Predict method rnc (regression network cohesion) objects","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/predict.rnc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict method for rnc (regression with network cohesion) objects — predict.rnc","text":"","code":"# S3 method for class 'rnc' predict(object, x, A_full, nodeids = NULL, ...)"},{"path":"https://tiffanymtang.github.io/nerfplus/reference/predict.rnc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict method for rnc (regression with network cohesion) objects — predict.rnc","text":"object object class rnc containing fitted model. x numeric matrix data frame predictors (features) make predictions ; size n x p. A_full adjacency matrix representing network structure full set nodes (training + testing nodes order) nodeids (Optional) vector node IDs length n. provided, node IDs indicate rows A_full, corresponding sample. provided, rows A_full assumed order (x_train, x). ... used.","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/predict.rnc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict method for rnc (regression with network cohesion) objects — predict.rnc","text":"list two: y: numeric vector predictions response variable. alpha: numeric vector node-specific effects (intercepts).","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/predict.rnc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predict method for rnc (regression with network cohesion) objects — predict.rnc","text":"","code":"data(example_data)  # demonstrate prediction for RNC fit rnc_fit <- rnc(   x = example_data$x, y = example_data$y, A = example_data$A,   lambda_netcoh = 1, lambda_x = 0.5 ) predicted_out <- predict(   rnc_fit, x = example_data$xtest, A_full = example_data$A_full )  # demonstrate prediction for RNC CV fit cv_fit <- rnc_cv(   x = example_data$x, y = example_data$y, A = example_data$A,   lambdas_netcoh = c(0, 0.1, 1),   lambdas_x = c(0.1, 0.5) ) predicted_out <- predict(   cv_fit, x = example_data$xtest, A_full = example_data$A_full )"},{"path":"https://tiffanymtang.github.io/nerfplus/reference/predict_rnc_linear.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict method for rnc linear regression objects — predict_rnc_linear","title":"Predict method for rnc linear regression objects — predict_rnc_linear","text":"Predict method rnc linear regression objects","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/predict_rnc_linear.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict method for rnc linear regression objects — predict_rnc_linear","text":"","code":"predict_rnc_linear(object, x, A_full, nodeids = NULL)"},{"path":"https://tiffanymtang.github.io/nerfplus/reference/predict_rnc_linear.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict method for rnc linear regression objects — predict_rnc_linear","text":"object object class rnc containing fitted model. x numeric matrix data frame predictors (features) make predictions ; size n x p. A_full adjacency matrix representing network structure full set nodes (training + testing nodes order) nodeids (Optional) vector node IDs length n. provided, node IDs indicate rows A_full, corresponding sample. provided, rows A_full assumed order (x_train, x).","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/predict_rnc_logistic.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict method for rnc logistic regression objects — predict_rnc_logistic","title":"Predict method for rnc logistic regression objects — predict_rnc_logistic","text":"Predict method rnc logistic regression objects","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/predict_rnc_logistic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict method for rnc logistic regression objects — predict_rnc_logistic","text":"","code":"predict_rnc_logistic(object, x, A_full, nodeids = NULL)"},{"path":"https://tiffanymtang.github.io/nerfplus/reference/predict_rnc_logistic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict method for rnc logistic regression objects — predict_rnc_logistic","text":"object object class rnc containing fitted model. x numeric matrix data frame predictors (features) make predictions ; size n x p. A_full adjacency matrix representing network structure full set nodes (training + testing nodes order) nodeids (Optional) vector node IDs length n. provided, node IDs indicate rows A_full, corresponding sample. provided, rows A_full assumed order (x_train, x).","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/prettyBox.html","id":null,"dir":"Reference","previous_headings":"","what":"Pretty box — prettyBox","title":"Pretty box — prettyBox","text":"Wrapper around shinydashboardPlus::box().","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/prettyBox.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pretty box — prettyBox","text":"","code":"prettyBox(   ...,   title = NULL,   width = 12,   color = NULL,   status = \"primary\",   solidHeader = TRUE,   box_only = FALSE )"},{"path":"https://tiffanymtang.github.io/nerfplus/reference/prettyBox.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pretty box — prettyBox","text":"... Arguments passed shinydashboardPlus::box(). title Optional title. width width box, using Bootstrap grid system. used row-based layouts. overall width region 12, default valueBox width 4 occupies 1/3 width. column-based layouts, use NULL width; width set column contains box. color Box outline color. status status item determines item's background   color.  Valid statuses defined follows: primary: #3c8dbc success: #00a65a info: #00c0ef warning: #f39c12 danger: #f56954 navy: #001F3F teal: #39CCCC purple: #605ca8 orange: #ff851b maroon: #D81B60 black: #111111 primary, success, info, warning danger compatible solidHeader! solidHeader header shown solid color background? box_only TRUE, return box box wrapped inside shiny::fluidRow().","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/prettyDashboardHeader.html","id":null,"dir":"Reference","previous_headings":"","what":"Pretty dashboard header — prettyDashboardHeader","title":"Pretty dashboard header — prettyDashboardHeader","text":"Wrapper around shinydashboard::dashboardHeader() allows title positioned left center.","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/prettyDashboardHeader.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pretty dashboard header — prettyDashboardHeader","text":"","code":"prettyDashboardHeader(   title,   title_position = c(\"left\", \"center\"),   title_style = list(),   ... )"},{"path":"https://tiffanymtang.github.io/nerfplus/reference/prettyDashboardHeader.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pretty dashboard header — prettyDashboardHeader","text":"title optional title show header bar.. default, also used title shown browser's title bar. want different text dashboard header bar, set title dashboardPage. title_position Position title, either \"left\" \"center\". title_style (Optional) list CSS styling options title. ... Arguments passed shinydashboard::dashboardHeader().","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/radio_buttons.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapper around prettyRadioButtons() — radio_buttons","title":"Wrapper around prettyRadioButtons() — radio_buttons","text":"Wrapper around prettyRadioButtons() different default settings.","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/radio_buttons.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapper around prettyRadioButtons() — radio_buttons","text":"","code":"radio_buttons(   inputId,   label,   choices,   selected = NULL,   status = \"primary\",   animation = \"jelly\",   icon = shiny::icon(\"check\"),   bigger = TRUE,   ... )"},{"path":"https://tiffanymtang.github.io/nerfplus/reference/radio_buttons.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapper around prettyRadioButtons() — radio_buttons","text":"inputId input slot used access value. label Display label control. choices List values show radio buttons . elements list named name rather value displayed user. argument provided, choiceNames choiceValues must provided, vice-versa. values strings; types (logicals numbers) coerced strings. selected values initially selected, (specified defaults first value). status Add class radio, can use Bootstrap status like 'info', 'primary', 'danger', 'warning' 'success'. animation Add animation radio checked, value smooth, jelly, tada, rotate, pulse. icon Optional, display icon radio, must icon created icon. bigger Scale radio bit bigger (TRUE FALSE). ... Additional arguments pass shinyWidgets::prettyRadioButtons().","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/radio_group_buttons.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapper around radioGroupButtons() — radio_group_buttons","title":"Wrapper around radioGroupButtons() — radio_group_buttons","text":"Wrapper around radioGroupButtons() different default settings.","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/radio_group_buttons.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapper around radioGroupButtons() — radio_group_buttons","text":"","code":"radio_group_buttons(   inputId,   label,   choices,   selected = NULL,   status = \"default\",   size = \"sm\",   justified = FALSE,   ... )"},{"path":"https://tiffanymtang.github.io/nerfplus/reference/radio_group_buttons.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapper around radioGroupButtons() — radio_group_buttons","text":"inputId input slot used access value. label Display label control, NULL label. choices List values select (elements list named name rather value displayed user). argument provided, choiceNames choiceValues must provided, vice-versa. values strings; types (logicals numbers) coerced strings. selected initially selected value. specified, defaults first item choices. start items selected, use character(0). status Add class buttons, can use Bootstrap status like 'info', 'primary', 'danger', 'warning' 'success'. use arbitrary strings add custom class, e.g. : status = \"custom-class\", buttons class btn-custom-class. size Size buttons ('xs', 'sm', 'normal', 'lg') justified TRUE, fill width parent div ... Additional arguments pass shinyWidgets::radioGroupButtons().","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/reset_button.html","id":null,"dir":"Reference","previous_headings":"","what":"Reset button — reset_button","title":"Reset button — reset_button","text":"Customized action button using actionButton().","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/reset_button.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reset button — reset_button","text":"","code":"reset_button(inputId = \"reset_input\", label = \"Reset all inputs\", ...)"},{"path":"https://tiffanymtang.github.io/nerfplus/reference/reset_button.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reset button — reset_button","text":"inputId input slot used access value. label contents button link–usually text label, also use HTML, like image. ... Additional arguments pass shiny::actionButton().","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/reset_inputs.html","id":null,"dir":"Reference","previous_headings":"","what":"Reset all inputs — reset_inputs","title":"Reset all inputs — reset_inputs","text":"Reset inputs default values. Note shinyjs::useShinyjs() needs includes UI work.","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/reset_inputs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reset all inputs — reset_inputs","text":"","code":"reset_inputs(input, session, reset_input_ids = NULL)"},{"path":"https://tiffanymtang.github.io/nerfplus/reference/reset_inputs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reset all inputs — reset_inputs","text":"input Shiny input. session Shiny session. reset_input_ids character vector input IDs reset. NULL, inputs reset.","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/rnc.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit regression with network cohesion — rnc","title":"Fit regression with network cohesion — rnc","text":"function fits regression model network cohesion regularization. code adapted netcoh R package minor tweaks increased speed flexibility. Currently, can handle linear logistic regression .","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/rnc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit regression with network cohesion — rnc","text":"","code":"rnc(   x,   y,   A,   nodedegrees = NULL,   nodeids = NULL,   lambda_netcoh,   lambda_x = 0,   lambda_l = 0.05,   family = c(\"linear\", \"logistic\"),   low_dim = NULL,   init = NULL,   newton_maxit = 50,   newton_tol = 1e-04,   verbose = FALSE )"},{"path":"https://tiffanymtang.github.io/nerfplus/reference/rnc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit regression with network cohesion — rnc","text":"x numeric matrix data frame predictors (features); size n x p. centered column mean 0. y numeric vector responses length n. centered mean 0. adjacency matrix representing network structure. nodedegrees (Optional) vector node degrees. provided, used compute graph Laplacian. provided, computed adjacency matrix . nodeids (Optional) vector node IDs length n. provided, node IDs indicate rows , corresponding sample. provided, rows assumed order rows x y. lambda_netcoh Regularization parameter network cohesion term. lambda_x (Optional) Regularization parameter (linear) covariates. Default 0 (.e., regularization). lambda_l (Optional) Regularization parameter graph Laplacian. Default 0.05. family character string indicating type model fit. Currently, \"linear\" \"logistic\" supported. low_dim (Optional) TRUE, algorithm use naive solver low-dimensional problems. Default NULL, use navie low-dimensional solver number covariates <= 1/5 * number samples. used family = \"linear\". init (Optional) initial values optimization algorithm fit logistic regression. Ignored linear regression. newton_maxit Maximum number Newton iterations fitting logistic regression. Default 50. Ignored linear regression. newton_tol Tolerance convergence Newton iterations fitting logistic regression. Default 1e-4. Ignored linear regression. verbose Logical indicating whether print progress messages.","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/rnc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit regression with network cohesion — rnc","text":"list following components: alpha: n x 1 matrix coefficients corresponding individual node effects beta: p x 1 matrix coefficients corresponding covariates lambda_netcoh: Regularization parameter network cohesion term. lambda_x: Regularization parameter covariates. lambda_l: Regularization parameter graph Laplacian. nalpha_train: Number distinct nodes training set (.e., number rows ). family: type model fitted, either \"linear\" \"logistic\".","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/rnc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit regression with network cohesion — rnc","text":"","code":"data(example_data) rnc_fit <- rnc(   x = example_data$x, y = example_data$y, A = example_data$A,   lambda_netcoh = 1, lambda_x = 0.5 )"},{"path":"https://tiffanymtang.github.io/nerfplus/reference/rnc_cv.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit regression with network cohesion with cross-validation wrapper — rnc_cv","title":"Fit regression with network cohesion with cross-validation wrapper — rnc_cv","text":"function fits regression model network cohesion regularization cross-validation wrapper. code adapted netcoh R package minor tweaks increased speed flexibility. Currently, can handle linear logistic regression .","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/rnc_cv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit regression with network cohesion with cross-validation wrapper — rnc_cv","text":"","code":"rnc_cv(   x,   y,   A,   nodeids = NULL,   lambdas_netcoh,   lambdas_x = 0,   lambdas_l = 0.05,   lambda_grid = NULL,   family = c(\"linear\", \"logistic\"),   cv = 5,   cv_foldids = NULL,   refit = TRUE,   newton_maxit = 50,   newton_tol = 1e-04,   verbose = FALSE )"},{"path":"https://tiffanymtang.github.io/nerfplus/reference/rnc_cv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit regression with network cohesion with cross-validation wrapper — rnc_cv","text":"x numeric matrix data frame predictors (features); size n x p. centered column mean 0. y numeric vector responses length n. centered mean 0. adjacency matrix representing network structure. nodeids (Optional) vector node IDs length n. provided, node IDs indicate rows , corresponding sample. provided, rows assumed order rows x y. lambdas_netcoh Vector list regularization parameters network cohesion term. lambdas_x Vector list regularization parameters (linear) covariates. Default 0 (.e., regularization). lambdas_l (Optional) Vector list regularization parameters graph Laplacian. lambda_grid (Optional) data frame columns lambda_netcoh, lambda_x, lambda_l, row specifies different set regularization parameters try. NULL, grid regularization parameters generated based upon possible combination provided lambdas_netcoh, lambdas_x, lambdas_l. family character string indicating type model fit. Currently, \"linear\" \"logistic\" supported. cv Number cross-validation folds. Default 5. cv_foldids (Optional) List length cv, component list vector sample indices fold. NULL (default), cross-validation folds created randomly. refit Logical indicating whether refit tuned model full training set cross-validation. Default TRUE. newton_maxit Maximum number Newton iterations fitting logistic regression. Default 50. Ignored linear regression. newton_tol Tolerance convergence Newton iterations fitting logistic regression. Default 1e-4. Ignored linear regression. verbose Logical indicating whether print progress messages.","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/rnc_cv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit regression with network cohesion with cross-validation wrapper — rnc_cv","text":"list following components: lambda_grid: data frame regularization parameters used cross-validation. best_params: data frame best regularization parameters found cross-validation. cv_errs: matrix cross-validation errors, row corresponds set regularization parameters column corresponds fold. regression, RMSE returned. classification, AUROC returned. cv_means: vector mean cross-validation errors set regularization parameters. cv_sds: vector standard deviations cross-validation errors set regularization parameters. components fitted model refit = TRUE (see output rnc()).","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/rnc_cv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit regression with network cohesion with cross-validation wrapper — rnc_cv","text":"","code":"data(example_data)  # fit RNC with CV cv_fit <- rnc_cv(   x = example_data$x, y = example_data$y, A = example_data$A,   lambdas_netcoh = c(0, 0.1, 1),   lambdas_x = c(0.1, 0.5) )  # fit RNC with CV, specifying lambda grid manually (equivalent to above) lambda_grid <- expand.grid(   lambda_netcoh = c(0, 0.1, 1),   lambda_x = c(0.1, 0.5),   lambda_l = 0.05 ) cv_fit <- rnc_cv(   x = example_data$x, y = example_data$y, A = example_data$A,   lambda_grid = lambda_grid )"},{"path":"https://tiffanymtang.github.io/nerfplus/reference/rnc_linear.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit linear regression with network cohesion — rnc_linear","title":"Fit linear regression with network cohesion — rnc_linear","text":"Fit linear regression network cohesion","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/rnc_linear.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit linear regression with network cohesion — rnc_linear","text":"","code":"rnc_linear(   x,   y,   A,   nodedegrees = NULL,   nodeids = NULL,   lambda_netcoh,   lambda_x = 0,   lambda_l = 0.05,   low_dim = NULL )"},{"path":"https://tiffanymtang.github.io/nerfplus/reference/rnc_linear.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit linear regression with network cohesion — rnc_linear","text":"x numeric matrix data frame predictors (features); size n x p. centered column mean 0. y numeric vector responses length n. centered mean 0. adjacency matrix representing network structure. nodedegrees (Optional) vector node degrees. provided, used compute graph Laplacian. provided, computed adjacency matrix . nodeids (Optional) vector node IDs length n. provided, node IDs indicate rows , corresponding sample. provided, rows assumed order rows x y. lambda_netcoh Regularization parameter network cohesion term. lambda_x (Optional) Regularization parameter (linear) covariates. Default 0 (.e., regularization). lambda_l (Optional) Regularization parameter graph Laplacian. Default 0.05. low_dim (Optional) TRUE, algorithm use naive solver low-dimensional problems. Default NULL, use navie low-dimensional solver number covariates <= 1/5 * number samples. used family = \"linear\".","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/rnc_linear_path.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit regularization path for linear regression with network cohesion — rnc_linear_path","title":"Fit regularization path for linear regression with network cohesion — rnc_linear_path","text":"Fit regularization path linear regression network cohesion","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/rnc_linear_path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit regularization path for linear regression with network cohesion — rnc_linear_path","text":"","code":"rnc_linear_path(   x,   y,   L,   x_test = NULL,   y_test = NULL,   L22 = NULL,   L21 = NULL,   lambda_grid,   nodeids = NULL,   nodeids_test = NULL,   ... )"},{"path":"https://tiffanymtang.github.io/nerfplus/reference/rnc_logistic.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit logistic regression with network cohesion — rnc_logistic","title":"Fit logistic regression with network cohesion — rnc_logistic","text":"Fit logistic regression network cohesion","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/rnc_logistic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit logistic regression with network cohesion — rnc_logistic","text":"","code":"rnc_logistic(   x,   y,   A,   nodedegrees = NULL,   nodeids = NULL,   lambda_netcoh,   lambda_x = 0,   lambda_l = 0.05,   init = NULL,   newton_maxit = 50,   newton_tol = 1e-04,   verbose = FALSE )"},{"path":"https://tiffanymtang.github.io/nerfplus/reference/rnc_logistic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit logistic regression with network cohesion — rnc_logistic","text":"x numeric matrix data frame predictors (features); size n x p. centered column mean 0. y numeric vector responses length n. centered mean 0. adjacency matrix representing network structure. nodedegrees (Optional) vector node degrees. provided, used compute graph Laplacian. provided, computed adjacency matrix . nodeids (Optional) vector node IDs length n. provided, node IDs indicate rows , corresponding sample. provided, rows assumed order rows x y. lambda_netcoh Regularization parameter network cohesion term. lambda_x (Optional) Regularization parameter (linear) covariates. Default 0 (.e., regularization). lambda_l (Optional) Regularization parameter graph Laplacian. Default 0.05. init (Optional) initial values optimization algorithm fit logistic regression. Ignored linear regression. newton_maxit Maximum number Newton iterations fitting logistic regression. Default 50. Ignored linear regression. newton_tol Tolerance convergence Newton iterations fitting logistic regression. Default 1e-4. Ignored linear regression. verbose Logical indicating whether print progress messages.","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/rnc_logistic_path.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit regularization path for logistic regression with network cohesion — rnc_logistic_path","title":"Fit regularization path for logistic regression with network cohesion — rnc_logistic_path","text":"Fit regularization path logistic regression network cohesion","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/rnc_logistic_path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit regularization path for logistic regression with network cohesion — rnc_logistic_path","text":"","code":"rnc_logistic_path(   x,   y,   A,   x_test = NULL,   y_test = NULL,   A_full = NULL,   lambda_grid,   nodeids = NULL,   nodeids_test = NULL,   newton_maxit = 50,   newton_tol = 1e-04,   ... )"},{"path":"https://tiffanymtang.github.io/nerfplus/reference/rsq_narm_vec.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate r-squared with NA handling — rsq_narm_vec","title":"Evaluate r-squared with NA handling — rsq_narm_vec","text":"function computes R-squared value returns 0 (instead NA) estimate constant vector.","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/rsq_narm_vec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate r-squared with NA handling — rsq_narm_vec","text":"","code":"rsq_narm_vec(truth, estimate, ...)"},{"path":"https://tiffanymtang.github.io/nerfplus/reference/rsq_narm_vec.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate r-squared with NA handling — rsq_narm_vec","text":"truth numeric vector true values. estimate numeric vector estimated values. ... Additional arguments passed yardstick::rsq_vec()","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/rsq_narm_vec.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evaluate r-squared with NA handling — rsq_narm_vec","text":"numeric value representing R-squared value, 0 estimate constant vector.","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/run_app.html","id":null,"dir":"Reference","previous_headings":"","what":"Run Shiny NeRF+ Interpret application — run_app","title":"Run Shiny NeRF+ Interpret application — run_app","text":"Run Shiny NeRF+ Interpret application","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/run_app.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run Shiny NeRF+ Interpret application — run_app","text":"","code":"run_app(   data_list = NULL,   object = NULL,   fi_results = NULL,   loo_results = NULL,   max_request_size = 100 * 1024^2,   ... )"},{"path":"https://tiffanymtang.github.io/nerfplus/reference/run_app.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run Shiny NeRF+ Interpret application — run_app","text":"data_list list containing data used interpretation. format data_list output interpret_nerfplus(). object fitted NeRF+ model. format object output interpret_nerfplus(). fi_results list containing feature importance results. format fi_results output interpret_nerfplus(). loo_results list containing sample influence results. format loo_results output interpret_nerfplus(). max_request_size Maximum request size file uploads. Defaults 100 MB. ... Additional arguments pass shiny::shinyApp()","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/run_app.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run Shiny NeRF+ Interpret application — run_app","text":"shiny application","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/run_app.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run Shiny NeRF+ Interpret application — run_app","text":"","code":"# \\donttest{ if (interactive()) {   # launch app   run_app() }  # or run with arguments data(example_data) nerfplus_out <- nerfplus(   x = example_data$x, y = example_data$y, A = example_data$A,   lambda_netcoh = 1,   lambda_embed = 0.1,   lambda_raw = 2,   lambda_stump = 3,   family = \"linear\", embedding = \"laplacian\", sample_split = \"none\" ) out <- interpret_nerfplus(   nerfplus_out, x = example_data$x, y = example_data$y, A = example_data$A,   xtest = example_data$xtest, ytest = example_data$ytest,   A_full = example_data$A_full )  if (interactive()) {   run_app(     data_list = out$data_list,     object = out$object,     fi_results = out$fi_results,     loo_results = out$loo_results   ) } # }"},{"path":"https://tiffanymtang.github.io/nerfplus/reference/run_button.html","id":null,"dir":"Reference","previous_headings":"","what":"Run button — run_button","title":"Run button — run_button","text":"Customized action button using actionButton().","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/run_button.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run button — run_button","text":"","code":"run_button(inputId = \"run_methods\", label = \"Run methods\", ...)"},{"path":"https://tiffanymtang.github.io/nerfplus/reference/run_button.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run button — run_button","text":"inputId input slot used access value. label contents button link–usually text label, also use HTML, like image. ... Additional arguments pass shiny::actionButton().","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/selectVizUI.html","id":null,"dir":"Reference","previous_headings":"","what":"Select visualization type (table, ggplot, plotly) — selectVizUI","title":"Select visualization type (table, ggplot, plotly) — selectVizUI","text":"Select visualization type (table, ggplot, plotly)","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/selectVizUI.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select visualization type (table, ggplot, plotly) — selectVizUI","text":"","code":"selectVizUI(   id,   choices = c(\"ggplot\", \"plotly\", \"table\"),   selected = NULL,   individual = FALSE,   size = \"normal\",   justified = FALSE,   float_right = FALSE,   ... )"},{"path":"https://tiffanymtang.github.io/nerfplus/reference/selectVizUI.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select visualization type (table, ggplot, plotly) — selectVizUI","text":"id Unique identifier. choices Choices must subset \"ggplot\", \"plotly\", \"table\" selected initially selected value. specified, defaults first item choices. start items selected, use character(0). individual TRUE, buttons separated. size Size buttons ('xs', 'sm', 'normal', 'lg') justified TRUE, fill width parent div float_right Logical. Whether float buttons right. ... Additional arguments pass radio_group_buttons","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/set_margins.html","id":null,"dir":"Reference","previous_headings":"","what":"Set margins — set_margins","title":"Set margins — set_margins","text":"Set margins","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/set_margins.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set margins — set_margins","text":"","code":"set_margins(obj, top = NULL, bottom = NULL, left = NULL, right = NULL)"},{"path":"https://tiffanymtang.github.io/nerfplus/reference/set_margins.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set margins — set_margins","text":"obj Object set margins. top Top margin. bottom Bottom margin. left Left margin. right Right margin.","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/shared_args.html","id":null,"dir":"Reference","previous_headings":"","what":"Arguments that are shared by multiple functions — shared_args","title":"Arguments that are shared by multiple functions — shared_args","text":"Arguments shared multiple functions","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/shared_args.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Arguments that are shared by multiple functions — shared_args","text":"x numeric matrix data frame predictors (features); size n x p. centered column mean 0. y numeric vector responses length n. centered mean 0. adjacency matrix representing network structure. nodeids (Optional) vector node IDs length n. provided, node IDs indicate rows , corresponding sample. provided, rows assumed order rows x y. family character string indicating type model fit. Currently, \"linear\" \"logistic\" supported. lambda_netcoh Regularization parameter network cohesion term. lambda_l (Optional) Regularization parameter graph Laplacian. Default 0.05. lambdas_netcoh Vector list regularization parameters network cohesion term. lambdas_l (Optional) Vector list regularization parameters graph Laplacian. cv Number cross-validation folds. Default 5. cv_foldids (Optional) List length cv, component list vector sample indices fold. NULL (default), cross-validation folds created randomly. refit Logical indicating whether refit tuned model full training set cross-validation. Default TRUE. low_dim (Optional) TRUE, algorithm use naive solver low-dimensional problems. Default NULL, use navie low-dimensional solver number covariates <= 1/5 * number samples. used family = \"linear\". init (Optional) initial values optimization algorithm fit logistic regression. Ignored linear regression. newton_maxit Maximum number Newton iterations fitting logistic regression. Default 50. Ignored linear regression. newton_tol Tolerance convergence Newton iterations fitting logistic regression. Default 1e-4. Ignored linear regression. verbose Logical indicating whether print progress messages. parallel Logical indicating whether use parallel processing. num.threads Number threads use parallel processing. Default 1. Ignored parallel = FALSE.","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/shared_args_util.html","id":null,"dir":"Reference","previous_headings":"","what":"Shared arguments for NeRF+ utility functions — shared_args_util","title":"Shared arguments for NeRF+ utility functions — shared_args_util","text":"Shared arguments NeRF+ utility functions","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/shared_args_util.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shared arguments for NeRF+ utility functions — shared_args_util","text":"tree_info Output ranger::treeInfo() single tree. tree_infos List size ntrees entry output ranger::treeInfo(). tree_paths List size ntrees paths tree; typically output get_forest_paths(). node_preds Matrix terminal node predictions tree random forest; typically, output predict(rf_fit, x, type = \"terminalNodes\")$predictions, rf_fit fitted ranger object x data frame matrix. unordered_factors Vector column names corresponding unordered factor variables data. inbag_counts List size ntrees inbag counts tree; typically output rf_fit$inbag.counts, rf_fit fitted ranger object. Ignored normalize = FALSE. include_raw Logical indicating whether include raw covariates NeRF+ model. Default TRUE.","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/tableModule.html","id":null,"dir":"Reference","previous_headings":"","what":"Basic table module - Server — tableServer","title":"Basic table module - Server — tableServer","text":"Basic table module - Server","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/tableModule.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Basic table module - Server — tableServer","text":"","code":"tableServer(   id,   table_fun,   table_options = TRUE,   mode = c(\"DT\", \"kable\"),   caption = NULL,   border = FALSE,   spinner = TRUE,   error_msg = \"\",   ... )"},{"path":"https://tiffanymtang.github.io/nerfplus/reference/tableOptionsUI.html","id":null,"dir":"Reference","previous_headings":"","what":"Basic Table Options — tableOptionsUI","title":"Basic Table Options — tableOptionsUI","text":"Basic Table Options","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/tableOptionsUI.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Basic Table Options — tableOptionsUI","text":"","code":"tableOptionsUI(   id,   digits = NA,   digits_label = \"Digits\",   sigfig = FALSE,   sigfig_label = \"Use Significant Digits\",   total_width = NULL )"},{"path":"https://tiffanymtang.github.io/nerfplus/reference/tableOptionsUI.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Basic Table Options — tableOptionsUI","text":"id Unique identifier. digits Default number digits display. digits_label Displayed label digits input. sigfig Logical. TRUE, use significant digits. sigfig_label Displayed label significant digits checkbox. total_width Total width html element.","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/tableOptionsUI.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Basic Table Options — tableOptionsUI","text":"List shiny tags.","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/tree_local_fi.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute local feature importance for a tree in NeRF+ — tree_local_fi","title":"Compute local feature importance for a tree in NeRF+ — tree_local_fi","text":"Compute local feature importance tree NeRF+","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/tree_local_fi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute local feature importance for a tree in NeRF+ — tree_local_fi","text":"","code":"tree_local_fi(   tree_object,   x,   A_full = NULL,   nodeids = NULL,   x_means = NULL,   grouped_features = NULL )"},{"path":"https://tiffanymtang.github.io/nerfplus/reference/tree_local_fi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute local feature importance for a tree in NeRF+ — tree_local_fi","text":"tree_object fitted tree object NeRF+. x data frame matrix used compute feature importances. A_full adjacency matrix representing network structure full set nodes (training + testing nodes order) nodeids (Optional) vector node IDs length n. provided, node IDs indicate rows , corresponding sample. provided, rows assumed order rows x y. x_means named vector means feature x. NULL, means computed x. grouped_features list features group together permutation importance. element list character vector feature names. NULL, feature treated separate group. Typically, output get_grouped_tree_features().","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/tree_local_fi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute local feature importance for a tree in NeRF+ — tree_local_fi","text":"tibble n rows p columns, n number samples p number features. column corresponds feature, row corresponds sample. values represent local feature importance scores feature sample.","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/tree_mdiplus_fi.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute MDI+ feature importance for a tree in NeRF+ — tree_mdiplus_fi","title":"Compute MDI+ feature importance for a tree in NeRF+ — tree_mdiplus_fi","text":"Compute MDI+ feature importance tree NeRF+","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/tree_mdiplus_fi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute MDI+ feature importance for a tree in NeRF+ — tree_mdiplus_fi","text":"","code":"tree_mdiplus_fi(   tree_object,   x,   y,   A_full = NULL,   nodeids = NULL,   metric,   x_means = NULL,   grouped_features = NULL )"},{"path":"https://tiffanymtang.github.io/nerfplus/reference/tree_mdiplus_fi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute MDI+ feature importance for a tree in NeRF+ — tree_mdiplus_fi","text":"tree_object fitted tree object NeRF+. x data frame matrix used compute feature importances. y vector responses. A_full adjacency matrix representing network structure full set nodes (training + testing nodes order) nodeids (Optional) vector node IDs length n. provided, node IDs indicate rows , corresponding sample. provided, rows assumed order rows x y. metric function compute metric used global feature importances. Defaults R-squared regression AUROC classification. Ignored method \"local\". x_means named vector means feature x. NULL, means computed x. grouped_features list features group together permutation importance. element list character vector feature names. NULL, feature treated separate group. Typically, output get_grouped_tree_features().","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/tree_mdiplus_fi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute MDI+ feature importance for a tree in NeRF+ — tree_mdiplus_fi","text":"tibble two columns: var: name feature. importance: computed feature importance score.","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/tree_permute_fi.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute permutation importance for a tree in NeRF+ — tree_permute_fi","title":"Compute permutation importance for a tree in NeRF+ — tree_permute_fi","text":"Compute permutation importance tree NeRF+","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/tree_permute_fi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute permutation importance for a tree in NeRF+ — tree_permute_fi","text":"","code":"tree_permute_fi(   tree_object,   x,   y,   A_full = NULL,   nodeids = NULL,   metric,   grouped_features = NULL,   B = 10,   return_preds = FALSE )"},{"path":"https://tiffanymtang.github.io/nerfplus/reference/tree_permute_fi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute permutation importance for a tree in NeRF+ — tree_permute_fi","text":"tree_object fitted tree object NeRF+. x data frame matrix used compute feature importances. y vector responses. A_full adjacency matrix representing network structure full set nodes (training + testing nodes order) nodeids (Optional) vector node IDs length n. provided, node IDs indicate rows , corresponding sample. provided, rows assumed order rows x y. metric function compute metric used global feature importances. Defaults R-squared regression AUROC classification. Ignored method \"local\". grouped_features list features group together permutation importance. element list character vector feature names. NULL, feature treated separate group. Typically, output get_grouped_tree_features(). B Number bootstrap samples permutation-based feature importance. Alternatively, list permutation indices can passed B, element vector indices permuting features. return_preds Logical indicating whether return predictions permutation. TRUE, function returns list predictions permutation. FALSE, returns computed feature importance scores.","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/tree_permute_fi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute permutation importance for a tree in NeRF+ — tree_permute_fi","text":"return_preds FALSE, tibble two columns: var: name feature. importance: computed feature importance score. return_preds TRUE, list element corresponds feature group contains list predictions permutation.","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/use_pretty_style.html","id":null,"dir":"Reference","previous_headings":"","what":"Use pretty css style — use_pretty_style","title":"Use pretty css style — use_pretty_style","text":"Use pretty css style","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/use_pretty_style.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use pretty css style — use_pretty_style","text":"","code":"use_pretty_style()"},{"path":"https://tiffanymtang.github.io/nerfplus/reference/vspace.html","id":null,"dir":"Reference","previous_headings":"","what":"Add vertical space — vspace","title":"Add vertical space — vspace","text":"Add vertical space","code":""},{"path":"https://tiffanymtang.github.io/nerfplus/reference/vspace.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add vertical space — vspace","text":"","code":"vspace(size = \"3px\")"},{"path":"https://tiffanymtang.github.io/nerfplus/reference/vspace.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add vertical space — vspace","text":"size Size vertical space.","code":""}]
