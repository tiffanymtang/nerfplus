// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// extract_psi_cpp
NumericMatrix extract_psi_cpp(NumericMatrix x, IntegerVector node_preds, List tree_paths, IntegerVector node_ids, IntegerVector split_vars, NumericVector split_vals);
RcppExport SEXP _nerfplus_extract_psi_cpp(SEXP xSEXP, SEXP node_predsSEXP, SEXP tree_pathsSEXP, SEXP node_idsSEXP, SEXP split_varsSEXP, SEXP split_valsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type node_preds(node_predsSEXP);
    Rcpp::traits::input_parameter< List >::type tree_paths(tree_pathsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type node_ids(node_idsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type split_vars(split_varsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type split_vals(split_valsSEXP);
    rcpp_result_gen = Rcpp::wrap(extract_psi_cpp(x, node_preds, tree_paths, node_ids, split_vars, split_vals));
    return rcpp_result_gen;
END_RCPP
}
// extract_psi_chr_cpp
NumericMatrix extract_psi_chr_cpp(NumericMatrix x, IntegerVector node_preds, List tree_paths, IntegerVector node_ids, IntegerVector split_vars, CharacterVector split_vals, IntegerVector unordered_factors);
RcppExport SEXP _nerfplus_extract_psi_chr_cpp(SEXP xSEXP, SEXP node_predsSEXP, SEXP tree_pathsSEXP, SEXP node_idsSEXP, SEXP split_varsSEXP, SEXP split_valsSEXP, SEXP unordered_factorsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type node_preds(node_predsSEXP);
    Rcpp::traits::input_parameter< List >::type tree_paths(tree_pathsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type node_ids(node_idsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type split_vars(split_varsSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type split_vals(split_valsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type unordered_factors(unordered_factorsSEXP);
    rcpp_result_gen = Rcpp::wrap(extract_psi_chr_cpp(x, node_preds, tree_paths, node_ids, split_vars, split_vals, unordered_factors));
    return rcpp_result_gen;
END_RCPP
}
// rnc_solver
List rnc_solver(NumericMatrix X, NumericMatrix Y, NumericMatrix L, NumericMatrix H, NumericMatrix W, double lambda_netcoh);
RcppExport SEXP _nerfplus_rnc_solver(SEXP XSEXP, SEXP YSEXP, SEXP LSEXP, SEXP HSEXP, SEXP WSEXP, SEXP lambda_netcohSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Y(YSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type L(LSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type H(HSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type W(WSEXP);
    Rcpp::traits::input_parameter< double >::type lambda_netcoh(lambda_netcohSEXP);
    rcpp_result_gen = Rcpp::wrap(rnc_solver(X, Y, L, H, W, lambda_netcoh));
    return rcpp_result_gen;
END_RCPP
}
// rnc_solver_naive
List rnc_solver_naive(NumericMatrix X, NumericMatrix Y, NumericMatrix L, NumericMatrix H, NumericMatrix W, double lambda_netcoh);
RcppExport SEXP _nerfplus_rnc_solver_naive(SEXP XSEXP, SEXP YSEXP, SEXP LSEXP, SEXP HSEXP, SEXP WSEXP, SEXP lambda_netcohSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Y(YSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type L(LSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type H(HSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type W(WSEXP);
    Rcpp::traits::input_parameter< double >::type lambda_netcoh(lambda_netcohSEXP);
    rcpp_result_gen = Rcpp::wrap(rnc_solver_naive(X, Y, L, H, W, lambda_netcoh));
    return rcpp_result_gen;
END_RCPP
}
// rnc_nodeids_solver
List rnc_nodeids_solver(NumericMatrix X, NumericMatrix Y, NumericMatrix L, NumericMatrix H, NumericMatrix W, NumericMatrix X_alpha, double lambda_netcoh);
RcppExport SEXP _nerfplus_rnc_nodeids_solver(SEXP XSEXP, SEXP YSEXP, SEXP LSEXP, SEXP HSEXP, SEXP WSEXP, SEXP X_alphaSEXP, SEXP lambda_netcohSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Y(YSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type L(LSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type H(HSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type W(WSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X_alpha(X_alphaSEXP);
    Rcpp::traits::input_parameter< double >::type lambda_netcoh(lambda_netcohSEXP);
    rcpp_result_gen = Rcpp::wrap(rnc_nodeids_solver(X, Y, L, H, W, X_alpha, lambda_netcoh));
    return rcpp_result_gen;
END_RCPP
}
// rnc_nodeids_solver_naive
List rnc_nodeids_solver_naive(NumericMatrix X, NumericMatrix Y, NumericMatrix L, NumericMatrix H, NumericMatrix W, NumericMatrix X_alpha, double lambda_netcoh);
RcppExport SEXP _nerfplus_rnc_nodeids_solver_naive(SEXP XSEXP, SEXP YSEXP, SEXP LSEXP, SEXP HSEXP, SEXP WSEXP, SEXP X_alphaSEXP, SEXP lambda_netcohSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Y(YSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type L(LSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type H(HSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type W(WSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X_alpha(X_alphaSEXP);
    Rcpp::traits::input_parameter< double >::type lambda_netcoh(lambda_netcohSEXP);
    rcpp_result_gen = Rcpp::wrap(rnc_nodeids_solver_naive(X, Y, L, H, W, X_alpha, lambda_netcoh));
    return rcpp_result_gen;
END_RCPP
}
// rnc_solver_path
List rnc_solver_path(NumericMatrix X, NumericMatrix Y, NumericMatrix L, double lambda_netcoh, List lambdas_x);
RcppExport SEXP _nerfplus_rnc_solver_path(SEXP XSEXP, SEXP YSEXP, SEXP LSEXP, SEXP lambda_netcohSEXP, SEXP lambdas_xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Y(YSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type L(LSEXP);
    Rcpp::traits::input_parameter< double >::type lambda_netcoh(lambda_netcohSEXP);
    Rcpp::traits::input_parameter< List >::type lambdas_x(lambdas_xSEXP);
    rcpp_result_gen = Rcpp::wrap(rnc_solver_path(X, Y, L, lambda_netcoh, lambdas_x));
    return rcpp_result_gen;
END_RCPP
}
// rnc_solver_path_predict
List rnc_solver_path_predict(NumericMatrix X, NumericMatrix Y, NumericMatrix L, NumericMatrix X_test, NumericMatrix Y_test, NumericMatrix L22, NumericMatrix L21, double lambda_netcoh, List lambdas_x, bool return_fit);
RcppExport SEXP _nerfplus_rnc_solver_path_predict(SEXP XSEXP, SEXP YSEXP, SEXP LSEXP, SEXP X_testSEXP, SEXP Y_testSEXP, SEXP L22SEXP, SEXP L21SEXP, SEXP lambda_netcohSEXP, SEXP lambdas_xSEXP, SEXP return_fitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Y(YSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type L(LSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X_test(X_testSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Y_test(Y_testSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type L22(L22SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type L21(L21SEXP);
    Rcpp::traits::input_parameter< double >::type lambda_netcoh(lambda_netcohSEXP);
    Rcpp::traits::input_parameter< List >::type lambdas_x(lambdas_xSEXP);
    Rcpp::traits::input_parameter< bool >::type return_fit(return_fitSEXP);
    rcpp_result_gen = Rcpp::wrap(rnc_solver_path_predict(X, Y, L, X_test, Y_test, L22, L21, lambda_netcoh, lambdas_x, return_fit));
    return rcpp_result_gen;
END_RCPP
}
// rnc_nodeids_solver_path
List rnc_nodeids_solver_path(NumericMatrix X, NumericMatrix Y, NumericMatrix L, double lambda_netcoh, List lambdas_x, NumericMatrix X_alpha);
RcppExport SEXP _nerfplus_rnc_nodeids_solver_path(SEXP XSEXP, SEXP YSEXP, SEXP LSEXP, SEXP lambda_netcohSEXP, SEXP lambdas_xSEXP, SEXP X_alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Y(YSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type L(LSEXP);
    Rcpp::traits::input_parameter< double >::type lambda_netcoh(lambda_netcohSEXP);
    Rcpp::traits::input_parameter< List >::type lambdas_x(lambdas_xSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X_alpha(X_alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(rnc_nodeids_solver_path(X, Y, L, lambda_netcoh, lambdas_x, X_alpha));
    return rcpp_result_gen;
END_RCPP
}
// rnc_logistic_solver
List rnc_logistic_solver(NumericMatrix X, NumericMatrix Y, NumericMatrix L, NumericMatrix H, double lambda_netcoh, NumericMatrix theta_init, int maxit, double tol, bool verbose);
RcppExport SEXP _nerfplus_rnc_logistic_solver(SEXP XSEXP, SEXP YSEXP, SEXP LSEXP, SEXP HSEXP, SEXP lambda_netcohSEXP, SEXP theta_initSEXP, SEXP maxitSEXP, SEXP tolSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Y(YSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type L(LSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type H(HSEXP);
    Rcpp::traits::input_parameter< double >::type lambda_netcoh(lambda_netcohSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type theta_init(theta_initSEXP);
    Rcpp::traits::input_parameter< int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(rnc_logistic_solver(X, Y, L, H, lambda_netcoh, theta_init, maxit, tol, verbose));
    return rcpp_result_gen;
END_RCPP
}
// get_tree_paths_cpp
List get_tree_paths_cpp(IntegerVector terminal_node_ids, IntegerVector left_child_ids, IntegerVector right_child_ids, IntegerVector node_ids);
RcppExport SEXP _nerfplus_get_tree_paths_cpp(SEXP terminal_node_idsSEXP, SEXP left_child_idsSEXP, SEXP right_child_idsSEXP, SEXP node_idsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type terminal_node_ids(terminal_node_idsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type left_child_ids(left_child_idsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type right_child_ids(right_child_idsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type node_ids(node_idsSEXP);
    rcpp_result_gen = Rcpp::wrap(get_tree_paths_cpp(terminal_node_ids, left_child_ids, right_child_ids, node_ids));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_nerfplus_extract_psi_cpp", (DL_FUNC) &_nerfplus_extract_psi_cpp, 6},
    {"_nerfplus_extract_psi_chr_cpp", (DL_FUNC) &_nerfplus_extract_psi_chr_cpp, 7},
    {"_nerfplus_rnc_solver", (DL_FUNC) &_nerfplus_rnc_solver, 6},
    {"_nerfplus_rnc_solver_naive", (DL_FUNC) &_nerfplus_rnc_solver_naive, 6},
    {"_nerfplus_rnc_nodeids_solver", (DL_FUNC) &_nerfplus_rnc_nodeids_solver, 7},
    {"_nerfplus_rnc_nodeids_solver_naive", (DL_FUNC) &_nerfplus_rnc_nodeids_solver_naive, 7},
    {"_nerfplus_rnc_solver_path", (DL_FUNC) &_nerfplus_rnc_solver_path, 5},
    {"_nerfplus_rnc_solver_path_predict", (DL_FUNC) &_nerfplus_rnc_solver_path_predict, 10},
    {"_nerfplus_rnc_nodeids_solver_path", (DL_FUNC) &_nerfplus_rnc_nodeids_solver_path, 6},
    {"_nerfplus_rnc_logistic_solver", (DL_FUNC) &_nerfplus_rnc_logistic_solver, 9},
    {"_nerfplus_get_tree_paths_cpp", (DL_FUNC) &_nerfplus_get_tree_paths_cpp, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_nerfplus(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
